--> NatvisTest.cpp:28$(549) // 	nop(); // BREAK HERE
TestFString() NatvisTest.cpp:28
    +empty = Empty: FString
    +valid = L"Valid string for view": FString

--> NatvisTest.cpp:39$(793) // 	nop(); // BREAK HERE
TestFStringView() NatvisTest.cpp:39
    +empty_wide = Empty: TStringView<wchar_t>
    +empty_ansi = Empty: TStringView<char>
    +ansi = <address> "Valid ansi string for view": TStringView<char>
    +wide = <address> L"Valid unicode string for view": TStringView<wchar_t>

--> NatvisTest.cpp:48$(954) // 	nop(); // BREAK HERE
TestFStringBuilder() NatvisTest.cpp:48
    +empty = Empty: TStringBuilderWithBuffer<wchar_t,42>
    +ansi = L"String builder appended string": TStringBuilderWithBuffer<wchar_t,42>

--> NatvisTest.cpp:55$(1031) // 	nop(); // BREAK HERE
TestFGuid() NatvisTest.cpp:55
    +guid = {874A74B5-4382-EDC4-96DD-57882D225021}: FGuid

--> NatvisTest.cpp:64$(1201) // 	nop(); // BREAK HERE
TestFText() NatvisTest.cpp:64
    +empty = Empty: FText
    +from_text = L"Some text": FText

--> NatvisTest.cpp:74$(1341) // 	nop(); // BREAK HERE
TestFName() NatvisTest.cpp:74
    +empty = None: FName
    +minimal_name = Rotation: FMinimalName
    +from_text = Some name: FName

--> NatvisTest.cpp:83$(1492) // 	nop(); // BREAK HERE
TestFStat() NatvisTest.cpp:83
    +stat = Invalid ST_int64 ////AdvanceFrame//////########_2294783: const FStatNameAndInfo &

--> NatvisTest.cpp:93$(1692) // 	nop(); // BREAK HERE
TestThreadSafePrimitives() NatvisTest.cpp:93
    +counter64 = {Counter=42}: FThreadSafeCounter64
    +flag_true = True: FThreadSafeBool
    +flag_false = False: FThreadSafeBool
    +counter = 42: FThreadSafeCounter

--> NatvisTest.cpp:100$(1768) // 	nop(); // BREAK HERE
TestFTimespan() NatvisTest.cpp:100
    +span = Ticks = 54080000000: FTimespan

--> NatvisTest.cpp:111$(2005) // 	nop(); // BREAK HERE
TestFVector() NatvisTest.cpp:111
    +v_net = {X=1 Y=2 Z=3}: FVector_NetQuantize
    +v4 = {={={X=1, Y=2, Z=3, ...}, XYZW=<address> {1, 2, 3, 4}}}: UE::Math::TVector4<double>
    +v = {X=1 Y=2 Z=3}: UE::Math::TVector<double>

--> NatvisTest.cpp:118$(2116) // 	nop(); // BREAK HERE
TestTEnumAsByte() NatvisTest.cpp:118
    +axis_type = Z: TEnumAsByte<enum EAxisOption::Type>

--> NatvisTest.cpp:164$(3096) // 	nop(); // BREAK HERE
TestTArray() NatvisTest.cpp:164
    +string_array = Num=3: TArray<FString,TSizedDefaultAllocator>
    +empty = Empty: TArray<int,TSizedDefaultAllocator>
    +wchar_array = Num=3 L"abc": TArray<wchar_t,TSizedDefaultAllocator>
    +byte_array = Num=3 "abc": TArray<unsigned char,TSizedDefaultAllocator>
    +int_array = Num=3: TArray<int,TSizedDefaultAllocator>
    +sparse_array = Num=2: TSparseArray<Dummy *,FDefaultSparseArrayAllocator>
    +dummy_array = Num=2: TArray<Dummy,TSizedDefaultAllocator>
    +bit_array = NumBits=32, MaxBits=128: TBitArray<FDefaultBitArrayAllocator>
    +name_array = Num=3: TArray<FName,TSizedDefaultAllocator>
    +string_array_view = Num=3: TArrayView<FString,int>

--> NatvisTest.cpp:172$(3246) // 	nop(); // BREAK HERE
TestTPair() NatvisTest.cpp:172
    +complex_pair = {KEY,L"Value"}: TTuple<FName,FString>
    +simple_pair = {1,2.5}: TTuple<int,float>

--> NatvisTest.cpp:186$(3604) // 	nop(); // BREAK HERE
TestSmartPointers() NatvisTest.cpp:186
    +null_wp = nullptr: TWeakPtr<Dummy,1>
    +inline_big = {{value=5, pad=<address> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...}}: TInlineValue<DummyBig,64,8>
    +inline_small = {{x=1, y=2, z=3}}: TInlineValue<Dummy,64,8>
    +sp = Ptr=<address>, SharedRefs={...}, WeakRefs={...}, Object={x=1, y=2, z=3}: TSharedPtr<Dummy,1>
    +sref = Ptr=<address>, SharedRefs={...}, WeakRefs={...}, Object={x=4, y=5, z=6}: TSharedRef<Dummy,1>
    +wp = Ptr=<address>, SharedRefs={...}, WeakRefs={...}, Object={x=1, y=2, z=3}: TWeakPtr<Dummy,1>
    +null_ptr = nullptr: TSharedPtr<Dummy,1>

--> NatvisTest.cpp:221$(4137) // 	nop(); // BREAK HERE
TestTMap() NatvisTest.cpp:221
    +simple_map = Num=3: TMap<int,float,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs>
    +empty = Empty: TMap<int,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs>
    +complex_map = Num=2: TMap<FName,FString,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs>
    +enum_class_map = Num=3: TMap<enum EC,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs>
    +custom_struct_key_map = Num=2: TMap<Dummy,DummyBig,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs>
    +enum_map = Num=3: TMap<enum E,int,FDefaultSetAllocator,TDefaultMapHashableKeyFuncs>

--> NatvisTest.cpp:234$(4376) // 	nop(); // BREAK HERE
TestTSet() NatvisTest.cpp:234
    +empty = Empty: TSet<int,DefaultKeyFuncs,FDefaultSetAllocator>
    +complex_set = Num=4: TSet<FName,DefaultKeyFuncs,FDefaultSetAllocator>
    +simple_set = Num=3: TSet<int,DefaultKeyFuncs,FDefaultSetAllocator>
    +custom_struct_set = Num=2: TSet<Dummy,DefaultKeyFuncs,FDefaultSetAllocator>

--> NatvisTest.cpp:244$(4576) // 	nop(); // BREAK HERE
TestTOptional() NatvisTest.cpp:244
    +empty = Unset: TOptional<int>
    +simple_val = Set: {5}: TOptional<int>
    +complex_val = Set: {VAL}: TOptional<FName>
    +custom_struct_val = Set: {{x=1, y=2, z=3}}: TOptional<Dummy>

--> NatvisTest.cpp:254$(4807) // 	nop(); // BREAK HERE
TestTUnion() NatvisTest.cpp:254
    +empty = TUnion{255 'ÿ'}: TUnion<Dummy,FName,int,FNull,FNull,FNull>
    +fname_val = TUnion{1 '\x1'}: TUnion<Dummy,FName,int,FNull,FNull,FNull>
    +int_val = TUnion{2 '\x2'}: TUnion<Dummy,FName,int,FNull,FNull,FNull>
    +dummy_val = TUnion{0 '\0'}: TUnion<Dummy,FName,int,FNull,FNull,FNull>

--> NatvisTest.cpp:268$(5094) // 	nop(); // BREAK HERE
TestTTuple() NatvisTest.cpp:268
    +empty2 = {0,None}: TTuple<int,FName>
    +tuple1 = {UE::Core::Private::Tuple::TTupleBase<TIntegerSequence<unsigned int,0>,int>={...}}: TTuple<int>
    +tuple2 = {3,VAL}: TTuple<int,FName>
    +empty1 = {UE::Core::Private::Tuple::TTupleBase<TIntegerSequence<unsigned int,0>,int>={...}}: TTuple<int>
    +tuple3 = {UE::Core::Private::Tuple::TTupleBase<TIntegerSequence<unsigned int,0,1,2>,int,FName,Dummy>={...}}: TTuple<int,FName,Dummy>
    +empty3 = {UE::Core::Private::Tuple::TTupleBase<TIntegerSequence<unsigned int,0,1,2>,int,FName,Dummy>={...}}: TTuple<int,FName,Dummy>

--> NatvisTest.cpp:282$(5325) // 	nop(); // BREAK HERE
TestFunction() NatvisTest.cpp:282
    +empty = Unset: TFunction<int __cdecl(void)>
    +global = : TFunction<int __cdecl(void)>
    +lambda = : TFunction<int __cdecl(void)>

--> NatvisTest.cpp:291$(5546) // 	nop(); // BREAK HERE
TestTRange() NatvisTest.cpp:291
    +inf = [-∞, +∞]: TRange<int>
    +empty = [-∞, +∞]: TRange<int>
    +closed = [5, 6]: TRange<int>

--> NatvisTest.cpp:303$(5933) // 	nop(); // BREAK HERE
TestTVariant() NatvisTest.cpp:303
    +empty = 0: TVariant<int>
    +complex = TEXT: TVariant<FName>
    +simple = 1: TVariant<int>
    +v2 = TEXT: TVariant<int,FName>
    +v3 = TEXT: TVariant<int,FName,Dummy>
    +custom_struct = {x=1, y=2, z=3}: TVariant<Dummy>

