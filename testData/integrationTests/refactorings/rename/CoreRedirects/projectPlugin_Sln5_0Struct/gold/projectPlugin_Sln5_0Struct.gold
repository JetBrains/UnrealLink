Init

[DefaultTestPlugin.ini]
﻿[CoreRedirects]


[MyActorPlugin.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyActorPlugin.h"


// Sets default values
AMyActorPlugin::AMyActorPlugin()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyActorPlugin::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyActorPlugin::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[TestPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestPlugin.h"

#define LOCTEXT_NAMESPACE "FTestPluginModule"

void FTestPluginModule::StartupModule()
{
	// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module
}

void FTestPluginModule::ShutdownModule()
{
	// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,
	// we call this function before unloading the module.
}

#undef LOCTEXT_NAMESPACE
	
IMPLEMENT_MODULE(FTestPluginModule, TestPlugin)

[MyActorPlugin.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyActorPlugin.generated.h"

UCLASS()
class TESTPLUGIN_API AMyActorPlugin : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyActorPlugin();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyPropertyPlugin:1;
};

USTRUCT()
struct FMyStructPlugin
{
	GENERATED_BODY()
};

UENUM()
enum EMyEnumPlugin { Some_Field };


UENUM()
enum class EMyEnumClassPlugin : uint8 { Some_Field };

[TestPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Modules/ModuleManager.h"

class FTestPluginModule : public IModuleInterface
{
public:

	/** IModuleInterface implementation */
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;
};


Rename Struct in plugin

[DefaultTestPlugin.ini]
﻿[CoreRedirects]
+StructRedirects=(OldName="/Script/TestPlugin.MyStructPlugin",NewName="/Script/TestPlugin.MyStructPluginRename")


[MyActorPlugin.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyActorPlugin.h"


// Sets default values
AMyActorPlugin::AMyActorPlugin()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyActorPlugin::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyActorPlugin::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[TestPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestPlugin.h"

#define LOCTEXT_NAMESPACE "FTestPluginModule"

void FTestPluginModule::StartupModule()
{
	// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module
}

void FTestPluginModule::ShutdownModule()
{
	// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,
	// we call this function before unloading the module.
}

#undef LOCTEXT_NAMESPACE
	
IMPLEMENT_MODULE(FTestPluginModule, TestPlugin)

[MyActorPlugin.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyActorPlugin.generated.h"

UCLASS()
class TESTPLUGIN_API AMyActorPlugin : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyActorPlugin();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyPropertyPlugin:1;
};

USTRUCT()
struct FMyStructPluginRename
{
	GENERATED_BODY()
};

UENUM()
enum EMyEnumPlugin { Some_Field };


UENUM()
enum class EMyEnumClassPlugin : uint8 { Some_Field };

[TestPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Modules/ModuleManager.h"

class FTestPluginModule : public IModuleInterface
{
public:

	/** IModuleInterface implementation */
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;
};


Second rename Struct in plugin

[DefaultTestPlugin.ini]
﻿[CoreRedirects]
+StructRedirects=(OldName="/Script/TestPlugin.MyStructPlugin",NewName="/Script/TestPlugin.MyStructPluginSecondRename")
+StructRedirects=(OldName="/Script/TestPlugin.MyStructPluginRename",NewName="/Script/TestPlugin.MyStructPluginSecondRename")


[MyActorPlugin.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyActorPlugin.h"


// Sets default values
AMyActorPlugin::AMyActorPlugin()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyActorPlugin::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyActorPlugin::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[TestPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestPlugin.h"

#define LOCTEXT_NAMESPACE "FTestPluginModule"

void FTestPluginModule::StartupModule()
{
	// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module
}

void FTestPluginModule::ShutdownModule()
{
	// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,
	// we call this function before unloading the module.
}

#undef LOCTEXT_NAMESPACE
	
IMPLEMENT_MODULE(FTestPluginModule, TestPlugin)

[MyActorPlugin.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyActorPlugin.generated.h"

UCLASS()
class TESTPLUGIN_API AMyActorPlugin : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyActorPlugin();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyPropertyPlugin:1;
};

USTRUCT()
struct FMyStructPluginSecondRename
{
	GENERATED_BODY()
};

UENUM()
enum EMyEnumPlugin { Some_Field };


UENUM()
enum class EMyEnumClassPlugin : uint8 { Some_Field };

[TestPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Modules/ModuleManager.h"

class FTestPluginModule : public IModuleInterface
{
public:

	/** IModuleInterface implementation */
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;
};


