Rename class in project

[MyActor.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyActor.h"


// Sets default values
AMyActorRename::AMyActorRename()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyActorRename::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyActorRename::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[MyActor.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyActor.generated.h"

UCLASS()
class TESTPROJECTANDPLUGIN_API AMyActorRename : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyActorRename();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyProperty:1;
};


[TestProjectAndPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestProjectAndPlugin.h"
#include "Modules/ModuleManager.h"

IMPLEMENT_PRIMARY_GAME_MODULE( FDefaultGameModuleImpl, TestProjectAndPlugin, "TestProjectAndPlugin" );


[TestProjectAndPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"



[TestProjectAndPluginGameModeBase.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.


#include "TestProjectAndPluginGameModeBase.h"



[TestProjectAndPluginGameModeBase.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/GameModeBase.h"
#include "TestProjectAndPluginGameModeBase.generated.h"

/**
 * 
 */
UCLASS()
class TESTPROJECTANDPLUGIN_API ATestProjectAndPluginGameModeBase : public AGameModeBase
{
	GENERATED_BODY()
	
};


[DefaultEditor.ini]


[DefaultEngine.ini]


[/Script/EngineSettings.GameMapsSettings]
GameDefaultMap=/Engine/Maps/Templates/Template_Default.Template_Default


[/Script/HardwareTargeting.HardwareTargetingSettings]
TargetedHardwareClass=Desktop
AppliedTargetedHardwareClass=Desktop
DefaultGraphicsPerformance=Maximum
AppliedDefaultGraphicsPerformance=Maximum

[/Script/Engine.Engine]
+ActiveGameNameRedirects=(OldGameName="TP_Blank",NewGameName="/Script/TestProjectAndPlugin")
+ActiveGameNameRedirects=(OldGameName="/Script/TP_Blank",NewGameName="/Script/TestProjectAndPlugin")
+ActiveClassRedirects=(OldClassName="TP_BlankGameModeBase",NewClassName="TestProjectAndPluginGameModeBase")


[CoreRedirects]
+ClassRedirects=(OldName="/Script/TestProjectAndPlugin.MyActor",NewName="/Script/TestProjectAndPlugin.MyActorRename")

[DefaultGame.ini]

[/Script/EngineSettings.GeneralProjectSettings]
ProjectID=BAD5CA1D4D6107BDFD8386832477EA30


Rename property in project

[MyActor.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyActor.h"


// Sets default values
AMyActorRename::AMyActorRename()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyActorRename::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyActorRename::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[MyActor.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyActor.generated.h"

UCLASS()
class TESTPROJECTANDPLUGIN_API AMyActorRename : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyActorRename();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyPropertyRename:1;
};


[TestProjectAndPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestProjectAndPlugin.h"
#include "Modules/ModuleManager.h"

IMPLEMENT_PRIMARY_GAME_MODULE( FDefaultGameModuleImpl, TestProjectAndPlugin, "TestProjectAndPlugin" );


[TestProjectAndPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"



[TestProjectAndPluginGameModeBase.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.


#include "TestProjectAndPluginGameModeBase.h"



[TestProjectAndPluginGameModeBase.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/GameModeBase.h"
#include "TestProjectAndPluginGameModeBase.generated.h"

/**
 * 
 */
UCLASS()
class TESTPROJECTANDPLUGIN_API ATestProjectAndPluginGameModeBase : public AGameModeBase
{
	GENERATED_BODY()
	
};


[DefaultEditor.ini]


[DefaultEngine.ini]


[/Script/EngineSettings.GameMapsSettings]
GameDefaultMap=/Engine/Maps/Templates/Template_Default.Template_Default


[/Script/HardwareTargeting.HardwareTargetingSettings]
TargetedHardwareClass=Desktop
AppliedTargetedHardwareClass=Desktop
DefaultGraphicsPerformance=Maximum
AppliedDefaultGraphicsPerformance=Maximum

[/Script/Engine.Engine]
+ActiveGameNameRedirects=(OldGameName="TP_Blank",NewGameName="/Script/TestProjectAndPlugin")
+ActiveGameNameRedirects=(OldGameName="/Script/TP_Blank",NewGameName="/Script/TestProjectAndPlugin")
+ActiveClassRedirects=(OldClassName="TP_BlankGameModeBase",NewClassName="TestProjectAndPluginGameModeBase")


[CoreRedirects]
+ClassRedirects=(OldName="/Script/TestProjectAndPlugin.MyActor",NewName="/Script/TestProjectAndPlugin.MyActorRename")
+PropertyRedirects=(OldName="/Script/TestProjectAndPlugin.MyActorRename.bMyProperty",NewName="/Script/TestProjectAndPlugin.MyActorRename.bMyPropertyRename")

[DefaultGame.ini]

[/Script/EngineSettings.GeneralProjectSettings]
ProjectID=BAD5CA1D4D6107BDFD8386832477EA30


Second rename class in project

[MyActor.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyActor.h"


// Sets default values
AMyActorSecondRename::AMyActorSecondRename()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyActorSecondRename::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyActorSecondRename::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[MyActor.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyActor.generated.h"

UCLASS()
class TESTPROJECTANDPLUGIN_API AMyActorSecondRename : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyActorSecondRename();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyPropertyRename:1;
};


[TestProjectAndPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestProjectAndPlugin.h"
#include "Modules/ModuleManager.h"

IMPLEMENT_PRIMARY_GAME_MODULE( FDefaultGameModuleImpl, TestProjectAndPlugin, "TestProjectAndPlugin" );


[TestProjectAndPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"



[TestProjectAndPluginGameModeBase.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.


#include "TestProjectAndPluginGameModeBase.h"



[TestProjectAndPluginGameModeBase.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/GameModeBase.h"
#include "TestProjectAndPluginGameModeBase.generated.h"

/**
 * 
 */
UCLASS()
class TESTPROJECTANDPLUGIN_API ATestProjectAndPluginGameModeBase : public AGameModeBase
{
	GENERATED_BODY()
	
};


[DefaultEditor.ini]


[DefaultEngine.ini]


[/Script/EngineSettings.GameMapsSettings]
GameDefaultMap=/Engine/Maps/Templates/Template_Default.Template_Default


[/Script/HardwareTargeting.HardwareTargetingSettings]
TargetedHardwareClass=Desktop
AppliedTargetedHardwareClass=Desktop
DefaultGraphicsPerformance=Maximum
AppliedDefaultGraphicsPerformance=Maximum

[/Script/Engine.Engine]
+ActiveGameNameRedirects=(OldGameName="TP_Blank",NewGameName="/Script/TestProjectAndPlugin")
+ActiveGameNameRedirects=(OldGameName="/Script/TP_Blank",NewGameName="/Script/TestProjectAndPlugin")
+ActiveClassRedirects=(OldClassName="TP_BlankGameModeBase",NewClassName="TestProjectAndPluginGameModeBase")


[CoreRedirects]
+ClassRedirects=(OldName="/Script/TestProjectAndPlugin.MyActor",NewName="/Script/TestProjectAndPlugin.MyActorSecondRename")
+PropertyRedirects=(OldName="/Script/TestProjectAndPlugin.MyActorRename.bMyProperty",NewName="/Script/TestProjectAndPlugin.MyActorSecondRename.bMyPropertyRename")
+ClassRedirects=(OldName="/Script/TestProjectAndPlugin.MyActorRename",NewName="/Script/TestProjectAndPlugin.MyActorSecondRename")

[DefaultGame.ini]

[/Script/EngineSettings.GeneralProjectSettings]
ProjectID=BAD5CA1D4D6107BDFD8386832477EA30


Second rename property in project

[MyActor.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyActor.h"


// Sets default values
AMyActorSecondRename::AMyActorSecondRename()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyActorSecondRename::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyActorSecondRename::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[MyActor.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyActor.generated.h"

UCLASS()
class TESTPROJECTANDPLUGIN_API AMyActorSecondRename : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyActorSecondRename();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyPropertySecondRename:1;
};


[TestProjectAndPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestProjectAndPlugin.h"
#include "Modules/ModuleManager.h"

IMPLEMENT_PRIMARY_GAME_MODULE( FDefaultGameModuleImpl, TestProjectAndPlugin, "TestProjectAndPlugin" );


[TestProjectAndPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"



[TestProjectAndPluginGameModeBase.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.


#include "TestProjectAndPluginGameModeBase.h"



[TestProjectAndPluginGameModeBase.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/GameModeBase.h"
#include "TestProjectAndPluginGameModeBase.generated.h"

/**
 * 
 */
UCLASS()
class TESTPROJECTANDPLUGIN_API ATestProjectAndPluginGameModeBase : public AGameModeBase
{
	GENERATED_BODY()
	
};


[DefaultEditor.ini]


[DefaultEngine.ini]


[/Script/EngineSettings.GameMapsSettings]
GameDefaultMap=/Engine/Maps/Templates/Template_Default.Template_Default


[/Script/HardwareTargeting.HardwareTargetingSettings]
TargetedHardwareClass=Desktop
AppliedTargetedHardwareClass=Desktop
DefaultGraphicsPerformance=Maximum
AppliedDefaultGraphicsPerformance=Maximum

[/Script/Engine.Engine]
+ActiveGameNameRedirects=(OldGameName="TP_Blank",NewGameName="/Script/TestProjectAndPlugin")
+ActiveGameNameRedirects=(OldGameName="/Script/TP_Blank",NewGameName="/Script/TestProjectAndPlugin")
+ActiveClassRedirects=(OldClassName="TP_BlankGameModeBase",NewClassName="TestProjectAndPluginGameModeBase")


[CoreRedirects]
+ClassRedirects=(OldName="/Script/TestProjectAndPlugin.MyActor",NewName="/Script/TestProjectAndPlugin.MyActorSecondRename")
+PropertyRedirects=(OldName="/Script/TestProjectAndPlugin.MyActorRename.bMyProperty",NewName="/Script/TestProjectAndPlugin.MyActorSecondRename.bMyPropertySecondRename")
+ClassRedirects=(OldName="/Script/TestProjectAndPlugin.MyActorRename",NewName="/Script/TestProjectAndPlugin.MyActorSecondRename")
+PropertyRedirects=(OldName="/Script/TestProjectAndPlugin.MyActorSecondRename.bMyPropertyRename",NewName="/Script/TestProjectAndPlugin.MyActorSecondRename.bMyPropertySecondRename")

[DefaultGame.ini]

[/Script/EngineSettings.GeneralProjectSettings]
ProjectID=BAD5CA1D4D6107BDFD8386832477EA30


