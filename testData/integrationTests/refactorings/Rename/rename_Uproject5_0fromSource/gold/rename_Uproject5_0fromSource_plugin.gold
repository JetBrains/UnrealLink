Rename class in plugin

[DefaultTestPlugin.ini]
﻿[CoreRedirects]
+ClassRedirects=(OldName="/Script/TestPlugin.MyPluginActor",NewName="/Script/TestPlugin.MyPluginActorRename")


[MyPluginActor.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyPluginActor.h"


// Sets default values
AMyPluginActorRename::AMyPluginActorRename()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyPluginActorRename::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyPluginActorRename::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[TestPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestPlugin.h"

#define LOCTEXT_NAMESPACE "FTestPluginModule"

void FTestPluginModule::StartupModule()
{
	// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module
}

void FTestPluginModule::ShutdownModule()
{
	// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,
	// we call this function before unloading the module.
}

#undef LOCTEXT_NAMESPACE
	
IMPLEMENT_MODULE(FTestPluginModule, TestPlugin)

[MyPluginActor.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyPluginActor.generated.h"

UCLASS()
class TESTPLUGIN_API AMyPluginActorRename : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyPluginActorRename();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyProperty:1;
};


[TestPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Modules/ModuleManager.h"

class FTestPluginModule : public IModuleInterface
{
public:

	/** IModuleInterface implementation */
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;
};


Rename property in plugin

[DefaultTestPlugin.ini]
﻿[CoreRedirects]
+ClassRedirects=(OldName="/Script/TestPlugin.MyPluginActor",NewName="/Script/TestPlugin.MyPluginActorRename")
+PropertyRedirects=(OldName="/Script/TestPlugin.MyPluginActorRename.bMyProperty",NewName="/Script/TestPlugin.MyPluginActorRename.bMyPropertyRename")


[MyPluginActor.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyPluginActor.h"


// Sets default values
AMyPluginActorRename::AMyPluginActorRename()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyPluginActorRename::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyPluginActorRename::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[TestPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestPlugin.h"

#define LOCTEXT_NAMESPACE "FTestPluginModule"

void FTestPluginModule::StartupModule()
{
	// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module
}

void FTestPluginModule::ShutdownModule()
{
	// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,
	// we call this function before unloading the module.
}

#undef LOCTEXT_NAMESPACE
	
IMPLEMENT_MODULE(FTestPluginModule, TestPlugin)

[MyPluginActor.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyPluginActor.generated.h"

UCLASS()
class TESTPLUGIN_API AMyPluginActorRename : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyPluginActorRename();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyPropertyRename:1;
};


[TestPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Modules/ModuleManager.h"

class FTestPluginModule : public IModuleInterface
{
public:

	/** IModuleInterface implementation */
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;
};


Second rename class in plugin

[DefaultTestPlugin.ini]
﻿[CoreRedirects]
+ClassRedirects=(OldName="/Script/TestPlugin.MyPluginActor",NewName="/Script/TestPlugin.MyPluginActorSecondRename")
+PropertyRedirects=(OldName="/Script/TestPlugin.MyPluginActorRename.bMyProperty",NewName="/Script/TestPlugin.MyPluginActorSecondRename.bMyPropertyRename")
+ClassRedirects=(OldName="/Script/TestPlugin.MyPluginActorRename",NewName="/Script/TestPlugin.MyPluginActorSecondRename")


[MyPluginActor.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyPluginActor.h"


// Sets default values
AMyPluginActorSecondRename::AMyPluginActorSecondRename()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyPluginActorSecondRename::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyPluginActorSecondRename::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[TestPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestPlugin.h"

#define LOCTEXT_NAMESPACE "FTestPluginModule"

void FTestPluginModule::StartupModule()
{
	// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module
}

void FTestPluginModule::ShutdownModule()
{
	// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,
	// we call this function before unloading the module.
}

#undef LOCTEXT_NAMESPACE
	
IMPLEMENT_MODULE(FTestPluginModule, TestPlugin)

[MyPluginActor.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyPluginActor.generated.h"

UCLASS()
class TESTPLUGIN_API AMyPluginActorSecondRename : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyPluginActorSecondRename();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyPropertyRename:1;
};


[TestPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Modules/ModuleManager.h"

class FTestPluginModule : public IModuleInterface
{
public:

	/** IModuleInterface implementation */
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;
};


Second rename property in plugin

[DefaultTestPlugin.ini]
﻿[CoreRedirects]
+ClassRedirects=(OldName="/Script/TestPlugin.MyPluginActor",NewName="/Script/TestPlugin.MyPluginActorSecondRename")
+PropertyRedirects=(OldName="/Script/TestPlugin.MyPluginActorRename.bMyProperty",NewName="/Script/TestPlugin.MyPluginActorSecondRename.bMyPropertySecondRename")
+ClassRedirects=(OldName="/Script/TestPlugin.MyPluginActorRename",NewName="/Script/TestPlugin.MyPluginActorSecondRename")
+PropertyRedirects=(OldName="/Script/TestPlugin.MyPluginActorSecondRename.bMyPropertyRename",NewName="/Script/TestPlugin.MyPluginActorSecondRename.bMyPropertySecondRename")


[MyPluginActor.cpp]
﻿// Fill out your copyright notice in the Description page of Project Settings.


#include "MyPluginActor.h"


// Sets default values
AMyPluginActorSecondRename::AMyPluginActorSecondRename()
{
	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	PrimaryActorTick.bCanEverTick = true;
}

// Called when the game starts or when spawned
void AMyPluginActorSecondRename::BeginPlay()
{
	Super::BeginPlay();
	
}

// Called every frame
void AMyPluginActorSecondRename::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);
}



[TestPlugin.cpp]
// Copyright Epic Games, Inc. All Rights Reserved.

#include "TestPlugin.h"

#define LOCTEXT_NAMESPACE "FTestPluginModule"

void FTestPluginModule::StartupModule()
{
	// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module
}

void FTestPluginModule::ShutdownModule()
{
	// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,
	// we call this function before unloading the module.
}

#undef LOCTEXT_NAMESPACE
	
IMPLEMENT_MODULE(FTestPluginModule, TestPlugin)

[MyPluginActor.h]
﻿// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/Actor.h"
#include "MyPluginActor.generated.h"

UCLASS()
class TESTPLUGIN_API AMyPluginActorSecondRename : public AActor
{
	GENERATED_BODY()

public:
	// Sets default values for this actor's properties
	AMyPluginActorSecondRename();

protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;

public:
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	UPROPERTY(EditAnywhere)
	uint8 bMyPropertySecondRename:1;
};


[TestPlugin.h]
// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "CoreMinimal.h"
#include "Modules/ModuleManager.h"

class FTestPluginModule : public IModuleInterface
{
public:

	/** IModuleInterface implementation */
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;
};


